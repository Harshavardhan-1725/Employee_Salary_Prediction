import streamlit as st
import pandas as pd
import joblib
import plotly.express as px
from io import BytesIO

# Load model and columns
@st.cache_data
def load_model():
    model = joblib.load("best_model.pkl")
    columns = joblib.load("model_columns.pkl")
    return model, columns

model, model_columns = load_model()

# Multilingual options
LANGUAGES = {
    "English": {
        "title": "üíº Employee Salary Classification App",
        "intro": "Predict whether an employee earns >50K or ‚â§50K based on input features.",
        "age": "Age",
        "workclass": "Workclass",
        "education": "Education",
        "occupation": "Occupation",
        "hours": "Hours per Week",
        "predict": "Predict Salary",
        "upload_csv": "Upload CSV for Bulk Predictions",
        "download": "Download Results",
        "predicted_income": "üí∞ Predicted Income"
    },
    "Hindi": {
        "title": "üíº ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§µ‡•á‡§§‡§® ‡§µ‡§∞‡•ç‡§ó‡•Ä‡§ï‡§∞‡§£ ‡§è‡§™‡•ç‡§™",
        "intro": "‡§á‡§®‡§™‡•Å‡§ü ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§≤‡§ó‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§ï‡•Ä ‡§Ü‡§Ø >50K ‡§Ø‡§æ ‚â§50K ‡§π‡•à‡•§",
        "age": "‡§Ü‡§Ø‡•Å",
        "workclass": "‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§µ‡§∞‡•ç‡§ó",
        "education": "‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ",
        "occupation": "‡§™‡•á‡§∂‡§æ",
        "hours": "‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ò‡§Ç‡§ü‡•á",
        "predict": "‡§µ‡•á‡§§‡§® ‡§ï‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡§∞‡•á‡§Ç",
        "upload_csv": "CSV ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "download": "‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "predicted_income": "üí∞ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§Ü‡§Ø"
    },
    "Telugu": {
        "title": "üíº ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó‡∞ø ‡∞ú‡±Ä‡∞§‡∞Ç ‡∞µ‡∞∞‡±ç‡∞ó‡±Ä‡∞ï‡∞∞‡∞£‡±ç ‡∞Ø‡∞æ‡∞™‡±ç‡∞™‡±ç",
        "intro": "‡∞á‡∞®‡±ç‡∞™‡±Å‡∞ü‡±ç ‡∞´‡±Ä‡∞ö‡∞∞‡±ç‡∞≤ ‡∞Ü‡∞ß‡∞æ‡∞∞‡∞Ç‡∞ó‡∞æ ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó‡∞ø ‡∞Ü‡∞¶‡∞æ‡∞Ø‡∞Ç >50K ‡∞≤‡±á‡∞¶‡∞æ ‡∞¢6‡∞ø ‡∞ï‡∞æ ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ‡∞æ‡∞≤‡∞®‡∞ø ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±á‡∞Ø‡∞Ç‡∞¶‡∞ø.",
        "age": "‡∞µ‡∞Ø‡∞∏‡±Å",
        "workclass": "‡∞™‡∞®‡∞ø ‡∞§‡∞∞‡∞ó‡∞§‡∞ø",
        "education": "‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø",
        "occupation": "‡∞µ‡±É‡∞§‡±ç‡∞§‡∞ø",
        "hours": "‡∞µ‡∞æ‡∞∞‡∞Ç‡∞ï‡∞ø ‡∞ó‡∞Ç‡∞ü‡∞≤‡±Å",
        "predict": "‡∞ú‡±Ä‡∞§‡∞Ç ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ",
        "upload_csv": "CSV ‡∞Ö‡∞™‡±ç‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "download": "‡∞´‡∞≤‡∞ø‡∞§‡∞æ‡∞≤‡∞®‡±Å ‡∞°‡±å‡∞®‡±ç‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "predicted_income": "üí∞ ‡∞Ö‡∞Ç‡∞ö‡∞® ‡∞ú‡±Ä‡∞§‡∞Ç"
    }
}

# Language Selection
language = st.sidebar.selectbox("üåê Select Language", list(LANGUAGES.keys()))
lang = LANGUAGES[language]

# UI
st.set_page_config(layout="wide")
st.title(lang["title"])
st.write(lang["intro"])
st.markdown("---")

# Manual Form Input
st.subheader("üîé Manual Input")
age = st.number_input(lang["age"], 18, 100)
workclass = st.selectbox(lang["workclass"], ["Private", "Self-emp-not-inc", "Self-emp-inc", "Federal-gov", "Local-gov", "State-gov", "Without-pay", "Never-worked"])
education = st.selectbox(lang["education"], ["Bachelors", "HS-grad", "11th", "Masters", "9th", "Some-college", "Assoc-acdm", "Assoc-voc", "7th-8th", "Doctorate", "Prof-school"])
occupation = st.selectbox(lang["occupation"], ["Tech-support", "Craft-repair", "Other-service", "Sales", "Exec-managerial", "Prof-specialty", "Handlers-cleaners", "Machine-op-inspct", "Adm-clerical", "Farming-fishing", "Transport-moving", "Priv-house-serv", "Protective-serv", "Armed-Forces"])
hours_per_week = st.slider(lang["hours"], 1, 100, 40)

if st.button(lang["predict"]):
    input_data = {
        "age": age,
        "workclass": workclass,
        "education": education,
        "occupation": occupation,
        "hours_per_week": hours_per_week
    }
    input_df = pd.DataFrame([input_data])
    input_encoded = pd.get_dummies(input_df)
    input_encoded = input_encoded.reindex(columns=model_columns, fill_value=0)

    prediction = model.predict(input_encoded)[0]
    st.success(f"{lang['predicted_income']}: **{prediction}**")

    # Save input_df globally to use in charts
    globals()['input_df'] = input_df

    # üé® Charts
    st.subheader("üìä Visual Insights from Input Data")

    fig_pie = px.pie(input_df, names='workclass', title="Workclass Distribution", color_discrete_sequence=['#2196F3'])
    fig_pie.update_traces(textinfo='percent+label', pull=[0.05])
    fig_pie.update_layout(template='plotly_white')
    st.plotly_chart(fig_pie, use_container_width=True)

    fig_bar = px.bar(input_df, x='occupation', y='hours_per_week', color='occupation', title="Occupation vs Hours per Week", color_discrete_sequence=['#2196F3'])
    fig_bar.update_layout(xaxis_tickangle=-45, template='plotly_white')
    st.plotly_chart(fig_bar, use_container_width=True)

    fig_hist = px.histogram(input_df, x='age', nbins=10, title="Age Distribution of Employees", color_discrete_sequence=['#2196F3'])
    fig_hist.update_layout(template='plotly_white')
    st.plotly_chart(fig_hist, use_container_width=True)

# CSV Upload for Bulk Predictions (Now at Bottom)
st.markdown("---")
st.subheader(f"üìÅ {lang['upload_csv']}")
uploaded_file = st.file_uploader("", type=["csv"])
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df_encoded = pd.get_dummies(df)
    df_encoded = df_encoded.reindex(columns=model_columns, fill_value=0)
    predictions = model.predict(df_encoded)
    df['Prediction'] = predictions

    st.success("‚úÖ Predictions done for uploaded data")
    st.dataframe(df)

    # üìä Charts
    st.subheader("üìä Charts from Bulk Data")

    if 'workclass' in df.columns:
        fig_pie = px.pie(df, names='workclass', title="Workclass Distribution", color_discrete_sequence=['#2196F3'])
        fig_pie.update_layout(template='plotly_white')
        st.plotly_chart(fig_pie, use_container_width=True)

    if 'occupation' in df.columns and 'hours_per_week' in df.columns:
        fig_bar = px.bar(df, x='occupation', y='hours_per_week', title="Occupation vs Hours per Week", color='occupation', color_discrete_sequence=['#2196F3'])
        fig_bar.update_layout(template='plotly_white', xaxis_tickangle=-45)
        st.plotly_chart(fig_bar, use_container_width=True)

    if 'age' in df.columns:
        fig_hist = px.histogram(df, x='age', nbins=10, title="Age Distribution", color_discrete_sequence=['#2196F3'])
        fig_hist.update_layout(template='plotly_white')
        st.plotly_chart(fig_hist, use_container_width=True)

    # Download predictions
    output = BytesIO()
    df.to_csv(output, index=False)
    st.download_button(label=lang["download"], data=output.getvalue(), file_name="predicted_results.csv", mime="text/csv")import streamlit as st
import pandas as pd
import joblib
import plotly.express as px
from io import BytesIO

# Load model and columns
@st.cache_data
def load_model():
    model = joblib.load("best_model.pkl")
    columns = joblib.load("model_columns.pkl")
    return model, columns

model, model_columns = load_model()

# Multilingual options
LANGUAGES = {
    "English": {
        "title": "üíº Employee Salary Classification App",
        "intro": "Predict whether an employee earns >50K or ‚â§50K based on input features.",
        "age": "Age",
        "workclass": "Workclass",
        "education": "Education",
        "occupation": "Occupation",
        "hours": "Hours per Week",
        "predict": "Predict Salary",
        "upload_csv": "Upload CSV for Bulk Predictions",
        "download": "Download Results",
        "predicted_income": "üí∞ Predicted Income"
    },
    "Hindi": {
        "title": "üíº ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§µ‡•á‡§§‡§® ‡§µ‡§∞‡•ç‡§ó‡•Ä‡§ï‡§∞‡§£ ‡§ê‡§™",
        "intro": "‡§á‡§®‡§™‡•Å‡§ü ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§≤‡§ó‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§ï‡•Ä ‡§Ü‡§Ø >50K ‡§Ø‡§æ ‚â§50K ‡§π‡•à‡•§",
        "age": "‡§Ü‡§Ø‡•Å",
        "workclass": "‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§µ‡§∞‡•ç‡§ó",
        "education": "‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ",
        "occupation": "‡§™‡•á‡§∂‡§æ",
        "hours": "‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ò‡§Ç‡§ü‡•á",
        "predict": "‡§µ‡•á‡§§‡§® ‡§ï‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ï‡§∞‡•á‡§Ç",
        "upload_csv": "CSV ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "download": "‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "predicted_income": "üí∞ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§Ü‡§Ø"
    },
    "Telugu": {
        "title": "üíº ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó‡∞ø ‡∞ú‡±Ä‡∞§‡∞Ç ‡∞µ‡∞∞‡±ç‡∞ó‡±Ä‡∞ï‡∞∞‡∞£ ‡∞Ø‡∞æ‡∞™‡±ç",
        "intro": "‡∞á‡∞®‡±ç‡∞™‡±Å‡∞ü‡±ç ‡∞´‡±Ä‡∞ö‡∞∞‡±ç‡∞≤ ‡∞Ü‡∞ß‡∞æ‡∞∞‡∞Ç‡∞ó‡∞æ ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó‡∞ø ‡∞Ü‡∞¶‡∞æ‡∞Ø‡∞Ç >50K ‡∞≤‡±á‡∞¶‡∞æ ‚â§50K ‡∞Ö‡∞®‡∞ø ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
        "age": "‡∞µ‡∞Ø‡∞∏‡±Å",
        "workclass": "‡∞™‡∞®‡∞ø ‡∞§‡∞∞‡∞ó‡∞§‡∞ø",
        "education": "‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø",
        "occupation": "‡∞µ‡±É‡∞§‡±ç‡∞§‡∞ø",
        "hours": "‡∞µ‡∞æ‡∞∞‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ó‡∞Ç‡∞ü‡∞≤‡±Å",
        "predict": "‡∞ú‡±Ä‡∞§‡∞Ç ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ",
        "upload_csv": "CSV ‡∞Ö‡∞™‡±ç‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "download": "‡∞´‡∞≤‡∞ø‡∞§‡∞æ‡∞≤‡∞®‡±Å ‡∞°‡±å‡∞®‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "predicted_income": "üí∞ ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞ú‡±Ä‡∞§‡∞Ç"
    }
}

# Language Selection
language = st.sidebar.selectbox("üåê Select Language", list(LANGUAGES.keys()))
lang = LANGUAGES[language]

# UI
st.set_page_config(layout="wide")
st.title(lang["title"])
st.write(lang["intro"])
st.markdown("---")

# CSV Upload for Bulk Predictions
uploaded_file = st.file_uploader(f"üìÅ {lang['upload_csv']}", type=["csv"])
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df_encoded = pd.get_dummies(df)
    df_encoded = df_encoded.reindex(columns=model_columns, fill_value=0)
    predictions = model.predict(df_encoded)
    df['Prediction'] = predictions

    st.success("‚úÖ Predictions done for uploaded data")
    st.dataframe(df)

    # üìä Charts
    st.subheader("üìä Charts from Bulk Data")

    if 'workclass' in df.columns:
        fig_pie = px.pie(df, names='workclass', title="Workclass Distribution", color_discrete_sequence=['#2196F3'])
        fig_pie.update_layout(template='plotly_white')
        st.plotly_chart(fig_pie, use_container_width=True)

    if 'occupation' in df.columns and 'hours_per_week' in df.columns:
        fig_bar = px.bar(df, x='occupation', y='hours_per_week', title="Occupation vs Hours per Week", color='occupation', color_discrete_sequence=['#2196F3'])
        fig_bar.update_layout(template='plotly_white', xaxis_tickangle=-45)
        st.plotly_chart(fig_bar, use_container_width=True)

    if 'age' in df.columns:
        fig_hist = px.histogram(df, x='age', nbins=10, title="Age Distribution", color_discrete_sequence=['#2196F3'])
        fig_hist.update_layout(template='plotly_white')
        st.plotly_chart(fig_hist, use_container_width=True)

    # Download predictions
    output = BytesIO()
    df.to_csv(output, index=False)
    st.download_button(label=lang["download"], data=output.getvalue(), file_name="predicted_results.csv", mime="text/csv")

else:
    # Manual Form Input
    st.subheader("üîé Manual Input")
    age = st.number_input(lang["age"], 18, 100)
    workclass = st.selectbox(lang["workclass"], ["Private", "Self-emp-not-inc", "Self-emp-inc", "Federal-gov", "Local-gov", "State-gov", "Without-pay", "Never-worked"])
    education = st.selectbox(lang["education"], ["Bachelors", "HS-grad", "11th", "Masters", "9th", "Some-college", "Assoc-acdm", "Assoc-voc", "7th-8th", "Doctorate", "Prof-school"])
    occupation = st.selectbox(lang["occupation"], ["Tech-support", "Craft-repair", "Other-service", "Sales", "Exec-managerial", "Prof-specialty", "Handlers-cleaners", "Machine-op-inspct", "Adm-clerical", "Farming-fishing", "Transport-moving", "Priv-house-serv", "Protective-serv", "Armed-Forces"])
    hours_per_week = st.slider(lang["hours"], 1, 100, 40)

    if st.button(lang["predict"]):
        input_data = {
            "age": age,
            "workclass": workclass,
            "education": education,
            "occupation": occupation,
            "hours_per_week": hours_per_week
        }
        input_df = pd.DataFrame([input_data])
        input_encoded = pd.get_dummies(input_df)
        input_encoded = input_encoded.reindex(columns=model_columns, fill_value=0)

        prediction = model.predict(input_encoded)[0]
        st.success(f"{lang['predicted_income']}: **{prediction}**")

        # Save input_df globally to use in charts
        globals()['input_df'] = input_df

        # üé® Charts
        st.subheader("üìä Visual Insights from Input Data")

        fig_pie = px.pie(input_df, names='workclass', title="Workclass Distribution", color_discrete_sequence=['#2196F3'])
        fig_pie.update_traces(textinfo='percent+label', pull=[0.05])
        fig_pie.update_layout(template='plotly_white')
        st.plotly_chart(fig_pie, use_container_width=True)

        fig_bar = px.bar(input_df, x='occupation', y='hours_per_week', color='occupation', title="Occupation vs Hours per Week", color_discrete_sequence=['#2196F3'])
        fig_bar.update_layout(xaxis_tickangle=-45, template='plotly_white')
        st.plotly_chart(fig_bar, use_container_width=True)

        fig_hist = px.histogram(input_df, x='age', nbins=10, title="Age Distribution of Employees", color_discrete_sequence=['#2196F3'])
        fig_hist.update_layout(template='plotly_white')
        st.plotly_chart(fig_hist, use_container_width=True)
